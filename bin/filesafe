#!/usr/bin/env ruby
#
# FileSafe - http://www.aarongifford.com/computers/filesafe/
#
# A simple file encryption/decryption script that uses 256-bit AES encryption,
# a secure random number/data source, and the password/passphrase (via PBKDF2)
# to encrypt/decrypt one or more files.
#
# Author::    Aaron D. Gifford - http://www.aarongifford.com/
# Copyright:: Copyright (c) 2010 Aaron D. Gifford
# License::   This file may be used and distributed under the MIT license
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

require 'filesafe' 

def usage(msg)
  STDERR.puts <<-EOM
ERROR: #{msg}

Usage: #{$0} -e|-d [-n] [-p 'pass phrase'] [--] file [file [file...]]
  -e                Encrypt file(s)
  -d                Decrypt file(s)
  -p 'pass phrase'  Passphrase to use for operation
  -n                Do NOT use a temporary password HMAC/hash file:
                     * ignore such file if found during encryption
                     * do not create such file during decryption
  --                End of options -- all subsequent arguments are files

  EOM
  exit
end

opt = { :notemp => false }
while ARGV.size > 0 && ARGV[0][0,1] == '-'
  case ARGV[0]
  when '-e'
    ARGV.shift
    usage "Please only specify ONE -d or -e option." if opt.key?(:op)
    opt[:op] = :encrypt
  when '-d'
    ARGV.shift
    usage "Please only specify ONE -d or -e option." if opt.key?(:op)
    opt[:op] = :decrypt
  when '-p'
    ARGV.shift
    usage "Please specify a passphrase and one or more files." if ARGV.size < 2
    opt[:phrase] = ARGV.shift
  when '-n'
    ARGV.shift
    opt[:notemp] = true
  when '--'
    break
  else
    usage "Unrecognized option: #{ARGV[0].inspect}"
  end
end
usage "You did not specify a -e encrypt or -d decrypt operation." unless opt.key?(:op)
usage "You must specify one or more files to operate on." if ARGV.size == 0

ARGV.each do |file|
  begin
    if opt[:op] == :decrypt
      FileSafe.decrypt(file, opt[:phrase], opt[:notemp])
      puts "FILE DECRYPTED: #{file}"
    else
      FileSafe.encrypt(file, opt[:phrase], opt[:notemp])
      puts "ENCRYPTED: #{file}"
    end
  rescue StandardError => e
    STDERR.puts "*** Error while working on file #{file.inspect}: #{e}"
    exit -1
  end
end

